name: Dependency Updates

on:
  schedule:
    - cron: '0 4 * * 1'  # Weekly on Mondays at 4 AM
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        update-type: ['patch', 'minor', 'major']
        include:
          - update-type: patch
            pip-compile-args: '--upgrade-package'
            pr-title: 'chore(deps): update patch dependencies'
            pr-labels: 'dependencies,patch'
          - update-type: minor
            pip-compile-args: '--upgrade'
            pr-title: 'chore(deps): update minor dependencies'
            pr-labels: 'dependencies,minor'
          - update-type: major
            pip-compile-args: '--upgrade --allow-unsafe'
            pr-title: 'chore(deps): update major dependencies'
            pr-labels: 'dependencies,major,breaking'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pip-audit

      - name: Update requirements
        run: |
          # Backup current requirements
          cp requirements.txt requirements.txt.bak
          cp requirements-dev.txt requirements-dev.txt.bak
          
          # Update based on matrix strategy
          if [ "${{ matrix.update-type }}" = "patch" ]; then
            # Only update patch versions
            pip-compile requirements.in --upgrade-package="*" --output-file requirements.txt
            pip-compile requirements-dev.in --upgrade-package="*" --output-file requirements-dev.txt
          elif [ "${{ matrix.update-type }}" = "minor" ]; then
            # Update minor versions
            pip-compile requirements.in --upgrade --output-file requirements.txt
            pip-compile requirements-dev.in --upgrade --output-file requirements-dev.txt
          else
            # Update major versions (more aggressive)
            pip-compile requirements.in --upgrade --allow-unsafe --output-file requirements.txt
            pip-compile requirements-dev.in --upgrade --allow-unsafe --output-file requirements-dev.txt
          fi

      - name: Check for security vulnerabilities
        run: |
          pip-audit --format=json --output=security-audit.json || true
          pip-audit --desc || true

      - name: Test updated dependencies
        run: |
          # Install updated dependencies
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
          # Run basic tests to ensure compatibility
          python -c "import src; print('Basic import test passed')"
          pytest tests/ -x -q --disable-warnings || echo "Tests failed - may need manual review"

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet requirements.txt requirements-dev.txt; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            ${{ matrix.pr-title }}
            
            - Updated dependencies using ${{ matrix.update-type }} strategy
            - Automated dependency maintenance
            
            🤖 This PR was generated automatically
          title: ${{ matrix.pr-title }}
          body: |
            ## Dependency Updates (${{ matrix.update-type }})
            
            This PR updates dependencies using the `${{ matrix.update-type }}` update strategy.
            
            ### Changes
            - 📦 Updated Python dependencies
            - 🔍 Security audit completed
            - ✅ Basic compatibility tests run
            
            ### Security Audit
            See attached `security-audit.json` for vulnerability scan results.
            
            ### Review Checklist
            - [ ] Review dependency changes
            - [ ] Check for breaking changes
            - [ ] Verify all tests pass
            - [ ] Validate application functionality
            
            ### Automatic Checks
            - CI pipeline will run full test suite
            - Security scans will validate new dependencies
            - Performance tests will check for regressions
            
            ---
            🤖 Generated by automated dependency update workflow
          branch: deps/${{ matrix.update-type }}-updates-${{ github.run_number }}
          labels: ${{ matrix.pr-labels }}
          draft: ${{ matrix.update-type == 'major' }}

  # Security-focused dependency updates
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install safety pip-audit

      - name: Security audit
        run: |
          # Check for known vulnerabilities
          safety check --json --output safety-report.json || true
          pip-audit --format=json --output pip-audit-report.json || true
          
          # Check if any critical vulnerabilities exist
          if pip-audit --desc | grep -i "critical\|high"; then
            echo "CRITICAL_VULNS=true" >> $GITHUB_ENV
          else
            echo "CRITICAL_VULNS=false" >> $GITHUB_ENV
          fi

      - name: Create security issue
        if: env.CRITICAL_VULNS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Critical Security Vulnerabilities Detected`;
            const body = `
            ## Security Alert
            
            Critical or high-severity vulnerabilities have been detected in project dependencies.
            
            ### Action Required
            - [ ] Review security reports in workflow artifacts
            - [ ] Update vulnerable dependencies immediately
            - [ ] Test for compatibility after updates
            - [ ] Deploy security fixes as soon as possible
            
            ### Reports
            - See workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Review \`safety-report.json\` and \`pip-audit-report.json\` artifacts
            
            ### Automated Response
            This issue was created automatically by the security monitoring workflow.
            `;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,critical',
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'critical', 'automated']
              });
            }

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Cleanup old dependency update branches
  cleanup:
    name: Cleanup Old Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old dependency branches
        run: |
          # Delete dependency update branches older than 7 days
          git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/deps/ | \
          while read branch date; do
            if [[ $(date -d "$date" +%s) -lt $(date -d "7 days ago" +%s) ]]; then
              echo "Deleting old branch: $branch"
              git push origin --delete "${branch#origin/}" || true
            fi
          done