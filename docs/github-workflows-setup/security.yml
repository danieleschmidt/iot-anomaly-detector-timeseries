name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit safety

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit.json --continue-on-error || true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json --continue-on-error || true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            pip-audit.json
            safety-report.json
          retention-days: 30

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install bandit
        run: pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json --exit-zero
          bandit -r src/ -f txt

      - name: Upload Bandit results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit.sarif
        continue-on-error: true

      - name: Upload code scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-scan-results
          path: bandit-report.json
          retention-days: 30

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: iot-anomaly-detector:scan
          outputs: type=docker,dest=/tmp/image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: '/tmp/image.tar'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for high/critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          input: '/tmp/image.tar'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90

      - name: Upload SBOM to dependency submission API
        uses: advanced-security/spdx-dependency-submission-action@v0.0.1
        with:
          filePath: "sbom.spdx.json"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, docker-security, secrets-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check each job status
          if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "✅ Dependency scan completed successfully" >> security-summary.md
          else
            echo "❌ Dependency scan failed" >> security-summary.md
          fi
          
          if [[ "${{ needs.code-scan.result }}" == "success" ]]; then
            echo "✅ Code security scan completed successfully" >> security-summary.md
          else
            echo "❌ Code security scan failed" >> security-summary.md
          fi
          
          if [[ "${{ needs.docker-security.result }}" == "success" ]]; then
            echo "✅ Docker security scan completed successfully" >> security-summary.md
          else
            echo "❌ Docker security scan failed or was skipped" >> security-summary.md
          fi
          
          if [[ "${{ needs.secrets-scan.result }}" == "success" ]]; then
            echo "✅ Secrets scan completed successfully" >> security-summary.md
          else
            echo "❌ Secrets scan failed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Next Steps" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review security scan results in the Actions tab" >> security-summary.md
          echo "2. Check GitHub Security tab for detailed findings" >> security-summary.md
          echo "3. Address any high/critical vulnerabilities found" >> security-summary.md
          echo "4. Update dependencies as recommended" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30