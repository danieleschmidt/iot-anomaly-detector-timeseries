name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * *'  # Daily security scan at 6 AM
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt -o bandit-report.txt
        continue-on-error: true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generateSarif: "1"
        continue-on-error: true

      - name: Upload Semgrep results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Run Safety security scan
        run: |
          safety check --json --output safety-report.json
          safety check --output safety-report.txt
        continue-on-error: true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --format=text --output=pip-audit-report.txt
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-report.*
            safety-report.*
            pip-audit-report.*
            semgrep.sarif

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        if: env.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test
        run: |
          snyk test --severity-threshold=high --json > snyk-results.json || true
          snyk test --severity-threshold=high
        continue-on-error: true
        if: env.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk monitor
        run: snyk monitor
        if: env.SNYK_TOKEN != '' && github.ref == 'refs/heads/main'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files.*.filename, 'Dockerfile')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t security-scan-image:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan-image:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'trivy-fs-results.txt'

      - name: Upload Trivy filesystem results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: |
            trivy-results.sarif
            trivy-fs-results.txt

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  # Security Policy Compliance
  compliance:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy files
        run: |
          echo "Checking for required security files..."
          
          files_to_check=(
            "SECURITY.md"
            ".github/SECURITY.md" 
            "CODE_OF_CONDUCT.md"
            ".github/CODE_OF_CONDUCT.md"
          )
          
          security_file_found=false
          conduct_file_found=false
          
          for file in "${files_to_check[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ Found: $file"
              if [[ "$file" == *"SECURITY"* ]]; then
                security_file_found=true
              fi
              if [[ "$file" == *"CODE_OF_CONDUCT"* ]]; then
                conduct_file_found=true
              fi
            fi
          done
          
          if [[ "$security_file_found" == false ]]; then
            echo "❌ No SECURITY.md file found"
            exit 1
          fi
          
          if [[ "$conduct_file_found" == false ]]; then
            echo "❌ No CODE_OF_CONDUCT.md file found"
            exit 1
          fi
          
          echo "✅ All required security policy files present"

      - name: Validate .gitignore for sensitive patterns
        run: |
          echo "Checking .gitignore for sensitive file patterns..."
          
          required_patterns=(
            "*.env"
            "*.key"
            "*.pem"
            "*.p12"
            "*.pfx"
            "config.json"
            "secrets.yaml"
            "*.secret"
          )
          
          missing_patterns=()
          
          for pattern in "${required_patterns[@]}"; do
            if ! grep -q "$pattern" .gitignore 2>/dev/null; then
              missing_patterns+=("$pattern")
            fi
          done
          
          if [[ ${#missing_patterns[@]} -gt 0 ]]; then
            echo "⚠️  Consider adding these patterns to .gitignore:"
            for pattern in "${missing_patterns[@]}"; do
              echo "  - $pattern"
            done
          else
            echo "✅ .gitignore contains recommended sensitive file patterns"
          fi

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast, codeql, dependency-scan, container-scan, secret-scan, compliance]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "Repository: ${{ github.repository }}" >> security-summary.md
          echo "Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Add job status
          echo "| Scan Type | Status |" >> security-summary.md
          echo "|-----------|--------|" >> security-summary.md
          echo "| Static Analysis (SAST) | ${{ needs.sast.result }} |" >> security-summary.md
          echo "| CodeQL | ${{ needs.codeql.result }} |" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> security-summary.md
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> security-summary.md
          echo "| Compliance Check | ${{ needs.compliance.result }} |" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Artifacts Generated" >> security-summary.md
          echo "" >> security-summary.md
          echo "The following security reports have been generated:" >> security-summary.md
          echo "" >> security-summary.md
          
          if [[ -d "security-scan-results" ]]; then
            echo "### Static Analysis Results" >> security-summary.md
            ls -la security-scan-results/ | grep -v '^d' | awk '{print "- " $9}' >> security-summary.md
            echo "" >> security-summary.md
          fi
          
          if [[ -d "trivy-scan-results" ]]; then
            echo "### Container Scan Results" >> security-summary.md
            ls -la trivy-scan-results/ | grep -v '^d' | awk '{print "- " $9}' >> security-summary.md
            echo "" >> security-summary.md
          fi
          
          echo "## Next Steps" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review all generated security reports" >> security-summary.md
          echo "2. Address any high or critical vulnerabilities" >> security-summary.md
          echo "3. Update dependencies if vulnerabilities are found" >> security-summary.md
          echo "4. Implement additional security controls as needed" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${summary}`
            });