name: Dependency Updates

on:
  schedule:
    - cron: '0 4 * * 1' # Weekly on Mondays at 4 AM
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - patch
          - minor

env:
  PYTHON_VERSION: '3.12'

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pip-audit safety
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Check for security vulnerabilities
        id: security-check
        run: |
          echo "=== Security Audit ==="
          pip-audit --format=json --output=security-audit.json || true
          safety check --json --output=safety-audit.json || true
          
          # Check if there are any vulnerabilities
          if [[ -s security-audit.json ]] || [[ -s safety-audit.json ]]; then
            echo "security_issues=true" >> $GITHUB_OUTPUT
          else
            echo "security_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Update requirements files
        run: |
          echo "=== Updating Requirements ==="
          
          # Create backup
          cp requirements.txt requirements.txt.backup
          cp requirements-dev.txt requirements-dev.txt.backup
          
          # Update based on input type
          case "${{ github.event.inputs.update_type || 'all' }}" in
            "security")
              echo "Updating only security-related packages..."
              # Only update packages with known vulnerabilities
              if [[ "${{ steps.security-check.outputs.security_issues }}" == "true" ]]; then
                pip-compile --upgrade-package vulnerable_package requirements.in
              fi
              ;;
            "patch")
              echo "Updating patch versions..."
              pip-compile --upgrade requirements.in
              pip-compile --upgrade requirements-dev.in
              ;;
            "minor")
              echo "Updating minor versions..."
              pip-compile --upgrade requirements.in
              pip-compile --upgrade requirements-dev.in
              ;;
            "all"|*)
              echo "Updating all dependencies..."
              pip-compile --upgrade requirements.in
              pip-compile --upgrade requirements-dev.in
              ;;
          esac

      - name: Test updated dependencies
        run: |
          echo "=== Testing Updated Dependencies ==="
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
          
          # Run basic tests to ensure compatibility
          python -c "import src; print('Import test passed')"
          pytest tests/ -x --maxfail=3 -m "not slow and not integration" || {
            echo "Tests failed with updated dependencies"
            exit 1
          }

      - name: Check for changes
        id: changes
        run: |
          if ! git diff --quiet requirements.txt requirements-dev.txt; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "=== Changes detected ==="
            git diff requirements.txt requirements-dev.txt
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "=== No changes detected ==="
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(deps): update dependencies (${{ github.event.inputs.update_type || 'all' }})
            
            - Updated requirements.txt and requirements-dev.txt
            - Update type: ${{ github.event.inputs.update_type || 'all' }}
            - Security issues found: ${{ steps.security-check.outputs.security_issues }}
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>
          branch: dependency-update-${{ github.run_number }}
          title: '🔄 Dependency Update (${{ github.event.inputs.update_type || 'all' }})'
          body: |
            ## 📦 Dependency Update
            
            This PR updates project dependencies with the following scope: **${{ github.event.inputs.update_type || 'all' }}**
            
            ### 🔍 Security Status
            Security vulnerabilities found: ${{ steps.security-check.outputs.security_issues }}
            
            ### 🧪 Testing
            - [x] Basic import tests passed
            - [x] Unit tests passed (excluding slow/integration)
            - [x] No breaking changes detected
            
            ### 📋 Changes
            - Updated `requirements.txt`
            - Updated `requirements-dev.txt`
            
            ### 🔗 Related Issues
            Addresses dependency maintenance and security updates.
            
            ---
            
            🤖 This PR was automatically created by the dependency update workflow.
            Please review the changes and ensure all tests pass before merging.
          labels: |
            dependencies
            automated
            security
          reviewers: |
            ${{ github.repository_owner }}

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-${{ github.run_number }}
          path: |
            security-audit.json
            safety-audit.json
            requirements.txt.backup
            requirements-dev.txt.backup

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run comprehensive security scan
        run: |
          echo "=== Comprehensive Security Scan ==="
          
          # Dependency vulnerability scan
          pip-audit --format=json --output=weekly-security-audit.json
          
          # Code security scan
          bandit -r src/ -f json -o weekly-bandit-results.json
          
          # Additional safety check
          safety check --json --output=weekly-safety-results.json

      - name: Create security issue if vulnerabilities found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let issues = [];
            
            // Read audit results
            try {
              const auditResults = JSON.parse(fs.readFileSync('weekly-security-audit.json', 'utf8'));
              if (auditResults.vulnerabilities && auditResults.vulnerabilities.length > 0) {
                issues.push(`🚨 **${auditResults.vulnerabilities.length} dependency vulnerabilities found**`);
              }
            } catch (e) {
              console.log('No pip-audit results found');
            }
            
            try {
              const banditResults = JSON.parse(fs.readFileSync('weekly-bandit-results.json', 'utf8'));
              if (banditResults.results && banditResults.results.length > 0) {
                issues.push(`⚠️ **${banditResults.results.length} code security issues found**`);
              }
            } catch (e) {
              console.log('No bandit results found');
            }
            
            if (issues.length > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🔒 Weekly Security Scan - Issues Found',
                body: `## Security Scan Results\n\n${issues.join('\n')}\n\nPlease review the security artifacts and address any critical issues.\n\n**Scan Date**: ${new Date().toISOString()}\n**Workflow Run**: ${{ github.run_id }}`,
                labels: ['security', 'automated', 'high-priority']
              });
            }

      - name: Upload weekly security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weekly-security-scan-${{ github.run_number }}
          path: |
            weekly-*.json