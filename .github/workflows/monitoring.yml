name: Monitoring & Observability

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Health check monitoring
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run health checks
        run: |
          echo "=== System Health Check ==="
          
          # Check imports
          python -c "import src; print('✅ Package imports successful')"
          
          # Check core modules
          python -c "from src.anomaly_detector import AnomalyDetector; print('✅ AnomalyDetector module healthy')"
          python -c "from src.autoencoder_model import LSTMAutoencoder; print('✅ LSTMAutoencoder module healthy')"
          
          # Check data generation
          python -m src.generate_data --num-samples 100 --num-features 3 --output-path /tmp/test_data.csv
          echo "✅ Data generation healthy"
          
          # Check model training (quick test)
          python -m src.train_autoencoder --epochs 1 --window-size 10 --latent-dim 4 --model-path /tmp/test_model.h5 --scaler-path /tmp/test_scaler.pkl
          echo "✅ Model training healthy"

      - name: Performance baseline check
        run: |
          echo "=== Performance Baseline Check ==="
          
          # Quick performance test
          python -c "
          import time
          from src.data_preprocessor import DataPreprocessor
          import pandas as pd
          import numpy as np
          
          # Generate test data
          data = pd.DataFrame(np.random.randn(1000, 3), columns=['sensor1', 'sensor2', 'sensor3'])
          
          # Test preprocessing performance
          start_time = time.time()
          preprocessor = DataPreprocessor()
          processed = preprocessor.fit_transform(data)
          end_time = time.time()
          
          processing_time = end_time - start_time
          print(f'Data processing time: {processing_time:.3f}s')
          
          if processing_time > 5.0:
              print('⚠️ Warning: Data processing slower than expected')
              exit(1)
          else:
              print('✅ Data processing performance acceptable')
          "

      - name: Upload health check results
        uses: actions/upload-artifact@v4
        with:
          name: health-check-results
          path: |
            /tmp/test_data.csv
            /tmp/test_model.h5
            /tmp/test_scaler.pkl

  # Performance monitoring
  performance-monitor:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install memory-profiler psutil

      - name: Run performance benchmarks
        run: |
          echo "=== Performance Benchmarks ==="
          
          # Memory usage monitoring
          python -c "
          import psutil
          import os
          from src.anomaly_detector import AnomalyDetector
          
          process = psutil.Process(os.getpid())
          initial_memory = process.memory_info().rss / 1024 / 1024  # MB
          print(f'Initial memory usage: {initial_memory:.2f} MB')
          
          # Simulate heavy usage
          try:
              # This would normally load a real model
              print('Simulating model loading...')
              peak_memory = process.memory_info().rss / 1024 / 1024  # MB
              print(f'Peak memory usage: {peak_memory:.2f} MB')
              
              if peak_memory > 500:  # 500MB threshold
                  print('⚠️ Warning: High memory usage detected')
              else:
                  print('✅ Memory usage within acceptable limits')
          except Exception as e:
              print(f'Performance test completed with note: {e}')
          "

      - name: Database performance check
        run: |
          echo "=== Database Performance Check ==="
          # Placeholder for database performance tests
          echo "✅ Database performance tests would run here"

      - name: API performance check
        run: |
          echo "=== API Performance Check ==="
          # Placeholder for API performance tests
          echo "✅ API performance tests would run here"

  # Dependency monitoring
  dependency-monitor:
    name: Dependency Health Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install monitoring tools
        run: |
          pip install pip-audit safety pip-licenses

      - name: Check dependency health
        run: |
          echo "=== Dependency Health Check ==="
          
          # Check for vulnerabilities
          echo "🔍 Scanning for security vulnerabilities..."
          pip-audit --format=json --output=vulnerability-report.json || true
          
          # Check for outdated packages
          echo "📦 Checking for outdated packages..."
          pip list --outdated --format=json > outdated-packages.json || true
          
          # Generate license report
          echo "📜 Generating license report..."
          pip-licenses --format=json --output-file=license-report.json
          
          # Summary report
          echo "📊 Dependency Summary:"
          pip list | wc -l | xargs echo "Total packages:"
          
          vulnerability_count=$(jq '.vulnerabilities | length' vulnerability-report.json 2>/dev/null || echo "0")
          echo "Security vulnerabilities: $vulnerability_count"
          
          outdated_count=$(jq '. | length' outdated-packages.json 2>/dev/null || echo "0")
          echo "Outdated packages: $outdated_count"

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            vulnerability-report.json
            outdated-packages.json
            license-report.json

  # Resource monitoring
  resource-monitor:
    name: Resource Usage Monitor
    runs-on: ubuntu-latest
    
    steps:
      - name: System resource check
        run: |
          echo "=== System Resource Monitoring ==="
          
          # CPU information
          echo "🖥️ CPU Information:"
          nproc
          cat /proc/cpuinfo | grep "model name" | head -1
          
          # Memory information
          echo "💾 Memory Information:"
          free -h
          
          # Disk usage
          echo "💿 Disk Usage:"
          df -h
          
          # Load average
          echo "⚡ Load Average:"
          uptime

      - name: Docker resource check
        run: |
          echo "=== Docker Resource Check ==="
          
          # Check Docker availability
          if command -v docker &> /dev/null; then
              echo "🐳 Docker is available"
              docker system df || true
              docker system info | grep -E "(CPUs|Total Memory)" || true
          else
              echo "ℹ️ Docker not available in this environment"
          fi

  # Alert and notification
  monitoring-alert:
    name: Monitoring Alerts
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitor, dependency-monitor]
    if: always() && (failure() || cancelled())
    
    steps:
      - name: Send alert notification
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'health-check', result: '${{ needs.health-check.result }}' },
              { name: 'performance-monitor', result: '${{ needs.performance-monitor.result }}' },
              { name: 'dependency-monitor', result: '${{ needs.dependency-monitor.result }}' }
            ];
            
            const failedJobs = jobs.filter(job => job.result === 'failure');
            const cancelledJobs = jobs.filter(job => job.result === 'cancelled');
            
            if (failedJobs.length > 0 || cancelledJobs.length > 0) {
              let alertBody = '## 🚨 Monitoring Alert\n\n';
              alertBody += `**Workflow**: ${context.workflow}\n`;
              alertBody += `**Run ID**: ${context.runId}\n`;
              alertBody += `**Trigger**: ${context.eventName}\n\n`;
              
              if (failedJobs.length > 0) {
                alertBody += '### ❌ Failed Jobs:\n';
                failedJobs.forEach(job => {
                  alertBody += `- ${job.name}\n`;
                });
                alertBody += '\n';
              }
              
              if (cancelledJobs.length > 0) {
                alertBody += '### ⏹️ Cancelled Jobs:\n';
                cancelledJobs.forEach(job => {
                  alertBody += `- ${job.name}\n`;
                });
                alertBody += '\n';
              }
              
              alertBody += '### 🔗 Links\n';
              alertBody += `- [Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
              alertBody += '- [Monitoring Dashboard](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions)\n\n';
              alertBody += '**Please investigate and resolve the issues promptly.**';
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Monitoring Alert - System Issues Detected',
                body: alertBody,
                labels: ['monitoring', 'alert', 'high-priority']
              });
            }