name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate release conditions
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            if [[ "$VERSION" == *"alpha"* || "$VERSION" == *"beta"* || "$VERSION" == *"rc"* ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${{ github.event.release.tag_name }}
            VERSION=${VERSION#v}
            IS_PRERELEASE=${{ github.event.release.prerelease }}
          else
            echo "Invalid release trigger"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"
            exit 1
          fi

  # Run tests before release
  test:
    name: Pre-release Testing
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        python-version: ['3.8', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run tests
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=term \
            -m "not slow" \
            --maxfail=5

      - name: Upload coverage
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: coverage.xml
          flags: release-tests

  # Build Python package
  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          git diff pyproject.toml

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*
          python -m pip install dist/*.whl
          python -c "import src; print('Package import successful')"

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # Build and push Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Security scan of release artifacts
  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [build-docker, build-package]
    
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Scan Python package
        run: |
          pip install safety pip-audit
          # Extract and scan the wheel
          cd dist
          python -m pip install *.whl
          safety check
          pip-audit

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-release
          path: trivy-results.sarif

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-package, build-docker, security-scan]
    if: github.event_name != 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: .

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Get the latest tag before this release
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          echo "# Release v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            
            # Get commit messages since the last tag
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges >> release_notes.md
          else
            echo "## Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            echo "This is the first release of the IoT Anomaly Detection system." >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## What's Included" >> release_notes.md
          echo "" >> release_notes.md
          echo "- 📦 Python package (wheel and source distribution)" >> release_notes.md
          echo "- 🐳 Docker image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION\`" >> release_notes.md
          echo "- 📋 Software Bill of Materials (SBOM)" >> release_notes.md
          echo "- 🔒 Security scan results" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Python Package" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "pip install iot-anomaly-detector==$VERSION" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Docker" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          generate_release_notes: true
          files: |
            dist/*
            sbom.spdx.json
          token: ${{ secrets.GITHUB_TOKEN }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release, build-package]
    if: needs.validate.outputs.is_prerelease == 'false'
    environment: pypi
    
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.validate.outputs.is_prerelease == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update version references
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Update README badges or version references
          if grep -q "version-" README.md; then
            sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION/" README.md
          fi
          
          # Update any other documentation files as needed
          find docs/ -name "*.md" -type f -exec sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$VERSION/g" {} \;

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          if git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git commit -m "docs: update version references to v${{ needs.validate.outputs.version }}"
            git push
          fi

  # Post-release notifications
  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Notify Slack
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          username: 'GitHub Actions'
          icon_emoji: ':rocket:'
          title: 'New Release: v${{ needs.validate.outputs.version }}'
          message: |
            🚀 **IoT Anomaly Detection v${{ needs.validate.outputs.version }}** has been released!
            
            📦 **PyPI**: Available now
            🐳 **Docker**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}`
            📋 **Release Notes**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}
            
            Status: ${{ needs.publish-pypi.result == 'success' && '✅ Published to PyPI' || '⚠️ PyPI publication skipped/failed' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate.outputs.version }}';
            const title = `Deploy v${version} to production`;
            const body = `
            ## Production Deployment Checklist
            
            Release **v${version}** is ready for production deployment.
            
            ### Pre-deployment
            - [ ] Review release notes and changes
            - [ ] Verify staging deployment is successful
            - [ ] Check security scan results
            - [ ] Confirm database migrations (if any)
            - [ ] Schedule maintenance window (if needed)
            
            ### Deployment
            - [ ] Deploy to production environment
            - [ ] Run smoke tests
            - [ ] Verify monitoring and alerts
            - [ ] Check application functionality
            
            ### Post-deployment
            - [ ] Monitor system metrics
            - [ ] Verify user functionality
            - [ ] Update runbooks if needed
            - [ ] Close this issue when complete
            
            ### Resources
            - **Release**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${version}
            - **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${version}\`
            - **Security Scan**: See release artifacts
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'production', 'release']
            });