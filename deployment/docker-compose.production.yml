# Production Docker Compose for IoT Anomaly Detection Pipeline
# Complete Generations 1-3 deployment stack

version: '3.8'

services:
  # Main Pipeline Service - Generation 3 (Scalable)
  pipeline-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.pipeline
      target: production
    image: terragon/iot-anomaly-pipeline:v1.3.0
    container_name: iot-pipeline-api
    restart: unless-stopped
    ports:
      - "8000:8000"  # API
      - "8080:8080"  # Health
    environment:
      - PIPELINE_MODE=scalable
      - ENABLE_CACHING=true
      - ENABLE_PARALLEL_PROCESSING=true
      - ENABLE_AUTO_SCALING=true
      - MAX_WORKERS=8
      - MAX_MEMORY_GB=4
      - VALIDATION_LEVEL=moderate
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://pipeline:secure_password@postgres:5432/pipeline_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - model_storage:/app/saved_models
      - data_storage:/app/data
      - logs:/app/logs
      - ./configs/production.yaml:/app/config/config.yaml:ro
    depends_on:
      - postgres
      - redis
      - monitoring
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 2G

  # Generation 2 (Robust) - Backup/Fallback Service
  pipeline-robust:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.pipeline
      target: production
    image: terragon/iot-anomaly-pipeline:v1.3.0
    container_name: iot-pipeline-robust
    restart: unless-stopped
    ports:
      - "8001:8000"  # API
      - "8081:8080"  # Health
    environment:
      - PIPELINE_MODE=robust
      - ENABLE_CACHING=false
      - ENABLE_PARALLEL_PROCESSING=false
      - VALIDATION_LEVEL=strict
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://pipeline:secure_password@postgres:5432/pipeline_db
    volumes:
      - model_storage:/app/saved_models
      - data_storage:/app/data
      - logs:/app/logs
    depends_on:
      - postgres
    networks:
      - pipeline-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iot-pipeline-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pipeline_db
      - POSTGRES_USER=pipeline
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipeline -d pipeline_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iot-pipeline-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_secure_password
    volumes:
      - redis_data:/data
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Load Balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: iot-pipeline-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    depends_on:
      - pipeline-api
      - pipeline-robust
    networks:
      - pipeline-network
      - external

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: iot-pipeline-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pipeline-network

  grafana:
    image: grafana/grafana:latest
    container_name: iot-pipeline-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - pipeline-network

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: iot-pipeline-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - pipeline-network

  promtail:
    image: grafana/promtail:latest
    container_name: iot-pipeline-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml:ro
      - logs:/var/log/pipeline:ro
      - /var/log:/var/log/host:ro
    depends_on:
      - loki
    networks:
      - pipeline-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: iot-pipeline-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=pipeline_db
      - POSTGRES_USER=pipeline
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - model_storage:/backup/models:ro
      - data_storage:/backup/data:ro
      - postgres_data:/backup/postgres:ro
      - backup_storage:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    command: crond -f -d 8
    depends_on:
      - postgres
    networks:
      - pipeline-network

volumes:
  model_storage:
    driver: local
  data_storage:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  logs:
    driver: local
  backup_storage:
    driver: local

networks:
  pipeline-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  external:
    driver: bridge