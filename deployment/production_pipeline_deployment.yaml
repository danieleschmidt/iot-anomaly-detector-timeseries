# Production Deployment Configuration for IoT Anomaly Detection Pipeline
# Autonomous SDLC Generation 1-3 Complete Implementation

apiVersion: apps/v1
kind: Deployment
metadata:
  name: iot-anomaly-pipeline
  namespace: production
  labels:
    app: iot-anomaly-pipeline
    version: v1.3.0
    generation: "1-3-complete"
    tier: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: iot-anomaly-pipeline
  template:
    metadata:
      labels:
        app: iot-anomaly-pipeline
        version: v1.3.0
    spec:
      containers:
      - name: pipeline-api
        image: terragon/iot-anomaly-pipeline:v1.3.0
        ports:
        - containerPort: 8000
          name: api
        - containerPort: 8080
          name: health
        env:
        - name: PIPELINE_MODE
          value: "scalable"
        - name: ENABLE_CACHING
          value: "true"
        - name: ENABLE_PARALLEL_PROCESSING
          value: "true"
        - name: ENABLE_AUTO_SCALING
          value: "true"
        - name: MAX_WORKERS
          value: "8"
        - name: MAX_MEMORY_GB
          value: "4"
        - name: VALIDATION_LEVEL
          value: "moderate"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: model-storage
          mountPath: /app/saved_models
        - name: data-storage
          mountPath: /app/data
        - name: config
          mountPath: /app/config
      - name: monitoring-sidecar
        image: terragon/monitoring-agent:latest
        ports:
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_NAME
          value: "iot-anomaly-pipeline"
        - name: METRICS_PATH
          value: "/metrics"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-pvc
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-pvc
      - name: config
        configMap:
          name: pipeline-config
      nodeSelector:
        node-type: compute-optimized
      tolerations:
      - key: "high-cpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: iot-anomaly-pipeline-service
  namespace: production
  labels:
    app: iot-anomaly-pipeline
spec:
  selector:
    app: iot-anomaly-pipeline
  ports:
  - name: api
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-config
  namespace: production
data:
  config.yaml: |
    pipeline:
      window_size: 30
      latent_dim: 16
      lstm_units: 32
      epochs: 50
      batch_size: 32
      validation_split: 0.2
      
    performance:
      enable_caching: true
      enable_parallel_processing: true
      enable_streaming: false
      enable_auto_scaling: true
      max_workers: 8
      max_memory_usage_gb: 4.0
      optimization_level: "balanced"
      
    validation:
      enable_validation: true
      validation_level: "moderate"
      auto_fix: false
      
    monitoring:
      enable_performance_monitoring: true
      enable_health_checks: true
      metrics_collection_interval: 60
      alert_thresholds:
        cpu_utilization: 80
        memory_utilization: 85
        error_rate: 0.05
        
    security:
      enable_input_validation: true
      enable_output_sanitization: true
      max_file_size_mb: 100
      allowed_file_extensions: [".csv", ".json"]

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-pvc
  namespace: production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: iot-anomaly-pipeline-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: iot-anomaly-pipeline
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: request_latency_p99
      target:
        type: AverageValue
        averageValue: "200m"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: iot-anomaly-pipeline-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: iot-anomaly-pipeline

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: iot-anomaly-pipeline-netpol
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: iot-anomaly-pipeline
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80